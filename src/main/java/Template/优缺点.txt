优点：
1.提高了代码的复用性，相同代码放在抽象的父类，将不同的代码放在不同的子类中。
2.实现反向控制，通过父类调用子类的操作，通过对子类的具体实现扩展不同的行为，实现了方向控制，满足开闭原则。
缺点：
1.对每个不用的实现都需要定义一个子类，导致系统更加庞大，设计更加抽象。
2.父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。
使用场景：
1.算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现.
2.需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。